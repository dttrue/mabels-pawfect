// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id        String    @id @default(cuid())
  fullName  String
  email     String
  phone     String
  address   String
  pets      Json // Already stores array of pet data
  service   String
  entries   Json?
  // NEW: Array of { date: string, time: string }
  status    String    @default("pending")
  notes     String?
  token     String?   @unique
  expiresAt DateTime?
  createdAt DateTime  @default(now())
}

model Review {
  id        String   @id @default(uuid())
  name      String
  message   String
  imageUrl  String?
  rating    Int? // New field for 1–5 paw rating
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Newsletter {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  altText     String? // ✅ NEW
  fileUrl     String?
  publicId    String? // ✅ NEW
  keywords    String[] @default([]) // ✅ NEW
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model BlockedDate {
  id        String   @id @default(uuid())
  date      DateTime
  service   String   @default("overnight")
  createdAt DateTime @default(now())

  @@unique([date, service])
}

enum GalleryCategory {
  HAPPY
  MEMORIAM
}

model Gallery {
  id        String          @id @default(uuid())
  imageUrl  String
  altText   String?
  caption   String?
  publicId  String          @unique
  category  GalleryCategory @default(HAPPY)
  keywords  String[]        @default([])
  deletedAt DateTime?
  createdAt DateTime        @default(now())

  // ✅ implicit many-to-many with Product (REQUIRES opposite side on Product)
  products Product[]

  @@map("ProviderGallery")
}

model Category {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String
  // ✅ partner side of implicit M2M with Product
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  subtitle    String?
  description String?
  priceCents  Int
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images     ProductImage[]
  // ✅ this needs Category model defined (above)
  categories Category[] // implicit M2M (no relation args)
  variants   Variant[]
  inventory  Inventory[]
  cartItems  CartItem[] // back-relation of CartItem.product

  // ✅ opposite side of Gallery.products
  galleries Gallery[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String? // ← optional
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  publicId  String // ← add
  alt       String?
  caption   String? // ← optional
  sort      Int      @default(0)
  createdAt DateTime @default(now()) // ← helpful

  @@unique([publicId]) // optional but nice to avoid dupes
  @@index([productId])
}

model Inventory {
  id        String   @id @default(cuid())
  productId String
  variantId String?
  onHand    Int      @default(0)
  reserved  Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([variantId])
}

model Variant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  priceCents Int?
  sku        String?     @unique
  active     Boolean     @default(true)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory  Inventory[]
  cartItems  CartItem[]

  @@index([productId])
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String
  productId  String
  variantId  String?
  qty        Int
  priceCents Int
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model Cart {
  id        String     @id @default(cuid()) // cuid() generates a globally unique identifier
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model Contest {
  id        String         @id @default(cuid())
  slug      String         @unique
  title     String
  startsAt  DateTime?
  endsAt    DateTime?
  entries   ContestEntry[]
  votes     ContestVote[]
  createdAt DateTime       @default(now())
}

model ContestEntry {
  id        String    @id @default(cuid())
  contestId String
  title     String
  publicId  String
  imageUrl  String?
  votes     Int       @default(0)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  contest     Contest       @relation(fields: [contestId], references: [id], onDelete: Cascade)
  voteRecords ContestVote[] @relation("EntryVotes") // ← relation name

  @@unique([contestId, title], name: "contestId_title")
  @@index([contestId, deletedAt])
  @@index([contestId, createdAt])
}

model ContestVote {
  id        String   @id @default(cuid())
  contestId String
  entryId   String
  ipHash    String
  uaHash    String?
  createdAt DateTime @default(now())

  contest Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  entry   ContestEntry @relation("EntryVotes", fields: [entryId], references: [id], onDelete: Cascade) // ← match name

  @@unique([entryId, ipHash], name: "one_vote_per_entry_per_ip")
  @@index([contestId])
}
